
Interrput_assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000162  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072f  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000640  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034b  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035f  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000127  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sevenSegment>:
 */ 

#include "INT0.h"

void sevenSegment()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	char array[]={0,1,2,3,4,5,6,7,8,9};
  a6:	8a e0       	ldi	r24, 0x0A	; 10
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	01 90       	ld	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	8a 95       	dec	r24
  b6:	e1 f7       	brne	.-8      	; 0xb0 <sevenSegment+0x1e>
  b8:	fe 01       	movw	r30, r28
  ba:	31 96       	adiw	r30, 0x01	; 1
  bc:	9e 01       	movw	r18, r28
  be:	25 5f       	subi	r18, 0xF5	; 245
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	89 e6       	ldi	r24, 0x69	; 105
  c6:	98 e1       	ldi	r25, 0x18	; 24
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <sevenSegment+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <sevenSegment+0x40>
  d2:	00 00       	nop
	int i ;	
	for(i=0;i<=9;i++)
	{
		_delay_ms(500);
		SevenSeg_PORT = (array[i] <<4);
  d4:	81 91       	ld	r24, Z+
  d6:	82 95       	swap	r24
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	89 e6       	ldi	r24, 0x69	; 105
  e0:	98 e1       	ldi	r25, 0x18	; 24
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <sevenSegment+0x50>
  ea:	00 c0       	rjmp	.+0      	; 0xec <sevenSegment+0x5a>
  ec:	00 00       	nop

void sevenSegment()
{
	char array[]={0,1,2,3,4,5,6,7,8,9};
	int i ;	
	for(i=0;i<=9;i++)
  ee:	e2 17       	cp	r30, r18
  f0:	f3 07       	cpc	r31, r19
  f2:	39 f7       	brne	.-50     	; 0xc2 <sevenSegment+0x30>
	{
		_delay_ms(500);
		SevenSeg_PORT = (array[i] <<4);
		_delay_ms(500); 
	}
  f4:	2a 96       	adiw	r28, 0x0a	; 10
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <__vector_1>:
#include <avr/io.h>
#include "INT0.h"

volatile unsigned char counter = 0 ;

ISR (INT0_vect){
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
	counter++;
 112:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	if(counter == 9){
 11c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 120:	89 30       	cpi	r24, 0x09	; 9
 122:	11 f4       	brne	.+4      	; 0x128 <__vector_1+0x22>
		counter=0;
 124:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
	}
}
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:

int main(void)
{
	
	GICR=(1<<INT0);
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	8b bf       	out	0x3b, r24	; 59
	CLEAR_BIT(MCUCR,ISC00);
 138:	85 b7       	in	r24, 0x35	; 53
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	82 60       	ori	r24, 0x02	; 2
 142:	85 bf       	out	0x35, r24	; 53
	sei();
 144:	78 94       	sei
	SevenSeg_direction |=(1<<4) |(1<<5) | (1<<6) | (1<<7);
 146:	8a b3       	in	r24, 0x1a	; 26
 148:	80 6f       	ori	r24, 0xF0	; 240
 14a:	8a bb       	out	0x1a, r24	; 26
	SevenSeg_EN_DIR |= SevenSEG_EN1 | SevenSEG_EN2; 
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	86 60       	ori	r24, 0x06	; 6
 150:	87 bb       	out	0x17, r24	; 23
    
    while (1) 
    {
		SevenSeg_EN_PORT |= SevenSEG_EN1 | SevenSEG_EN2; 
 152:	88 b3       	in	r24, 0x18	; 24
 154:	86 60       	ori	r24, 0x06	; 6
 156:	88 bb       	out	0x18, r24	; 24
		sevenSegment();
 158:	0e 94 49 00 	call	0x92	; 0x92 <sevenSegment>
 15c:	fa cf       	rjmp	.-12     	; 0x152 <main+0x1e>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
