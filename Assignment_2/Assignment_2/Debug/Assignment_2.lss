
Assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057e  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000508  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d1  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include "bit_math.h"

int main(void)
{
	CLEAR_BIT(DDRB,0); //make Button 0 input
  6c:	b8 98       	cbi	0x17, 0	; 23
	CLEAR_BIT(DDRB,4); //make Button 1 input
  6e:	bc 98       	cbi	0x17, 4	; 23


	SET_BIT(DDRC,2); //make LED_0 output
  70:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(DDRC,7); //make LED_1 output
  72:	a7 9a       	sbi	0x14, 7	; 20
	SET_BIT(DDRD,3); //make LED_2 output
  74:	8b 9a       	sbi	0x11, 3	; 17
	SET_BIT(DDRA,3); //make buzzer output
  76:	d3 9a       	sbi	0x1a, 3	; 26
	int counter = 0;
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0

    /* Replace with your application code */
    while (1) 
    {
		if (GET_BIT(PINB,0) == 1)
  7c:	b0 9b       	sbis	0x16, 0	; 22
  7e:	05 c0       	rjmp	.+10     	; 0x8a <main+0x1e>
		{
			SET_BIT(PORTA,3);
  80:	db 9a       	sbi	0x1b, 3	; 27
		} 
		else
		{
			CLEAR_BIT(PORTA,3);
		}
		while(counter <= 3)
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	91 05       	cpc	r25, r1
  86:	1c f0       	brlt	.+6      	; 0x8e <main+0x22>
  88:	f9 cf       	rjmp	.-14     	; 0x7c <main+0x10>
		{
			SET_BIT(PORTA,3);
		} 
		else
		{
			CLEAR_BIT(PORTA,3);
  8a:	db 98       	cbi	0x1b, 3	; 27
  8c:	fa cf       	rjmp	.-12     	; 0x82 <main+0x16>
		}
		while(counter <= 3)
		{
			if (GET_BIT(PINB,0) == 1)
  8e:	b0 99       	sbic	0x16, 0	; 22
			{
				counter ++ ;
  90:	01 96       	adiw	r24, 0x01	; 1
			} 
			if (counter == 0)
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	19 f4       	brne	.+6      	; 0x9c <main+0x30>
			{
				SET_BIT(PORTC,2);
  96:	aa 9a       	sbi	0x15, 2	; 21
			{
				SET_BIT(PORTC,7);
			}
			else
			{
				CLEAR_BIT(PORTC,7);
  98:	af 98       	cbi	0x15, 7	; 21
  9a:	0d c0       	rjmp	.+26     	; 0xb6 <main+0x4a>
			{
				SET_BIT(PORTC,2);
			} 
			else
			{
				CLEAR_BIT(PORTC,2);
  9c:	aa 98       	cbi	0x15, 2	; 21
			}
			//******************************************
			if (counter == 1)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	19 f4       	brne	.+6      	; 0xaa <main+0x3e>
			{
				SET_BIT(PORTC,7);
  a4:	af 9a       	sbi	0x15, 7	; 21
			{
				SET_BIT(PORTD,3);
			}
			else
			{
				CLEAR_BIT(PORTD,3);
  a6:	93 98       	cbi	0x12, 3	; 18
  a8:	f2 cf       	rjmp	.-28     	; 0x8e <main+0x22>
			{
				SET_BIT(PORTC,7);
			}
			else
			{
				CLEAR_BIT(PORTC,7);
  aa:	af 98       	cbi	0x15, 7	; 21
			}
			//*******************************************
			if (counter == 2)
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 05       	cpc	r25, r1
  b0:	11 f4       	brne	.+4      	; 0xb6 <main+0x4a>
			{
				SET_BIT(PORTD,3);
  b2:	93 9a       	sbi	0x12, 3	; 18
  b4:	ec cf       	rjmp	.-40     	; 0x8e <main+0x22>
			}
			else
			{
				CLEAR_BIT(PORTD,3);
  b6:	93 98       	cbi	0x12, 3	; 18
		} 
		else
		{
			CLEAR_BIT(PORTA,3);
		}
		while(counter <= 3)
  b8:	84 30       	cpi	r24, 0x04	; 4
  ba:	91 05       	cpc	r25, r1
  bc:	44 f3       	brlt	.-48     	; 0x8e <main+0x22>
  be:	de cf       	rjmp	.-68     	; 0x7c <main+0x10>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
